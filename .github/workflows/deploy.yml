# Workflow autogenerado por inteligencia artificial
name: Test and Deploy Arena of Music Spring Boot App

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - develop

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: maven-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-${{ runner.os }}-

      - name: Install Google Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y wget
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i google-chrome-stable_current_amd64.deb
          sudo apt-get install -f -y  # Fix any missing dependencies
          
      - name: Install Xvfb (X Virtual Frame Buffer)
        run: |
          sudo apt install -y xvfb
          Xvfb :99 -screen 0 1280x1024x24 &
          export DISPLAY=:99

      - name: Start Chrome in headless mode with remote debugging enabled
        run: |
          google-chrome-stable --headless --remote-debugging-port=9222 --no-sandbox --disable-dev-shm-usage --remote-allow-origins=* &

      - name: Install ChromeDriver
        run: |
          CHROME_DRIVER_VERSION=`curl -sS chromedriver.storage.googleapis.com/LATEST_RELEASE`
          wget https://chromedriver.storage.googleapis.com/$CHROME_DRIVER_VERSION/chromedriver_linux64.zip
          unzip chromedriver_linux64.zip
          sudo mv chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver

      - name: Build Spring Boot App
        run: mvn clean package -DskipTests
          
      - name: Run Spring Boot Tests
        run: mvn test

      - name: Run Karate Tests
        run: mvn test -Dtest=**/*Runner

  deploy:
    runs-on: ubuntu-latest
    needs: test 
    if: github.ref == 'refs/heads/main'

    environment: UCM Docker

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Configure credentials
        run: |
          echo '{
            "target": "${{ secrets.TARGET }}",
            "target_user": "${{ secrets.TARGET_USER }}",
            "target_pass": "${{ secrets.TARGET_PASS }}",
            "jumphost": "${{ secrets.JUMPHOST }}",
            "jumphost_user": "${{ secrets.JUMPHOST_USER }}",
            "jumphost_pass": "${{ secrets.JUMPHOST_PASS }}"
          }' > credentials.json


      - name: Restart Application in Tmux (before deploy)
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.TARGET_USER }}@${{ secrets.TARGET }} << 'EOF'
            if tmux has-session -t myapp 2>/dev/null; then
              echo "Stopping existing application..."
              tmux send-keys -t myapp C-c
              sleep 2
              tmux kill-session -t myapp
            fi
            echo "Starting new application..."
            tmux new-session -d -s myapp
          EOF
      
      - name: Run Deploy Script
        run: |
          source venv/bin/activate
          python deploy.py
      
      - name: Deploy Application in Tmux
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.TARGET_USER }}@${{ secrets.TARGET }} << 'EOF'
            echo "Starting the application in tmux..."
            tmux send-keys -t myapp "SPRING_PROFILES_ACTIVE=container java -jar target/*.jar" C-m
          EOF
